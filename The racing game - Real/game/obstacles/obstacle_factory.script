-- Spawn an obstacle at a random x position, at the top of the screen with a specifoed speed
function create()
		spawn_chance = math.random(1,100)
		if spawn_chance <= 10 then
		elseif spawn_chance <= 45 then
			factory.create("/obstacle_gen#swerv_fact",vmath.vector3(math.random(50, width), 1000, 0.51), nil, {speed = speed}, 1)
		elseif spawn_chance <= 46 then
			factory.create("/obstacle_gen#sailor_fact",vmath.vector3(math.random(50, width), 1000, 0.53), nil, {speed = 300}, 1)
		elseif spawn_chance <= 98 then
			factory.create("/obstacle_gen#straight_fact",vmath.vector3(math.random(50, width), 1000, 0.5), nil, {speed = speed * math.random(0.9, 1.1)}, 0.8)
		elseif spawn_chance <= 100 then
			factory.create("/obstacle_gen#hostile_fact",vmath.vector3(math.random(50, width), 1000, 0.52), nil, {speed = 400}, 0.8)
		end
end

function init(self)
	spawn_rate = 4
	width, height = window.get_size()
	speed = 400
	elapsed = 0
end

function update(self, dt)
	-- Sound processing from https://defold.com/manuals/sound/
	for i, group_hash in ipairs(sound.get_groups()) do
		local left_rms, right_rms = sound.get_rms(group_hash, 2048 / 65536.0)
		
		-- If no music playing then use standard spawning method
		if right_rms == 0 then
			-- elapsed is timer to determine when to spawn
			elapsed = elapsed - dt
			--Limit spawn rate to prevent extreme values
			if elapsed <= 0 and spawn_rate < 10 then

				-- Increase spawn rate and decrease time between spawns, then spawn
				spawn_rate = spawn_rate + 0.01
				elapsed = 1/spawn_rate
				create()

				-- Increase obstacle movement speed
				if speed <= 800 then
					speed = speed + 2
				end

				-- If max spawn_rate reached then reduce to half to create cyclical pattern
			elseif spawn_rate >= 10 then
				spawn_rate = 5
			end
			
			-- Spawn enemies at certain parts during the song
			-- Spawn threshold dtermined through analysis of rms of music. See documentation Moving Obstacles > Feedback 2
		elseif right_rms >= 0.28 then
			--Set constant, fast speed
			speed = 700
			create()
		end
	end
end
