-- For save and load functions
require "modules.save_load"

--Create ignore property, set to false
go.property("ignore_collisions", false)

--Increaes the score earned over time. Sent to game.gui_script
function increase_base_score()
	base_score = base_score + 1
	msg.post("/gui#game", "set_multiplier", {multiplier = multiplier * base_score})
end

--Function adapted from  https://defold.com/examples/physics/raycast/ for self playing visuals
local function draw_line(from, to, color)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = color })
end

function init(self)
	--Respond to inputs 
	msg.post(".", "acquire_input_focus")
	
	--Initialise variables for player data
	player_data = load("player_data",nil, true)
	strafe_speed = player_data["strafe_speed"]
	ram_durability = player_data["ram_durability"]
	multiplier = player_data["score_mult"]

	-- Base speed added to strafe speed when moving.
	self.base_speed= 50
	self.speed = 0

	--Initialise variables to handle sound
	sound_played = false -- Tracks if sound has been played yet
	music = false -- Tracks if music currently playing
	
	paused = false

	--Cost variable for self-playing mode
	total = 0

	-- Base score for score multiplier
	base_score = 1
	
	-- Used to define movement bounds in update
	width, height = window.get_size()

	-- Updates gui to show ram_durability, multiplier
	msg.post("/gui#game", "set_ram", { durability = ram_durability })
	msg.post("/gui#game", "set_multiplier", {multiplier = multiplier * base_score})
	
	--Start particlefx
	particlefx.play("/player#water")

	--Every 10 seconds the score earned per update increaes by 1
	timer.delay(7, true, increase_base_score)

	-- For implimenting ram functionality
	id_to_ignore = ""
end

function final(self)
	--Reset time step to default from paused state
	msg.post("controller:/controller_object#game_proxy", "set_time_step", {factor = 1, mode = 1})
	
	-- Stop music and raycasting.
	sound.stop("/obstacle_gen#sound")
	raycasting = false
end

function update(self, dt)
	-- Get position and modify based on input, set new position
	pos = go.get_position()

	-- If in self-playing mode
	if raycasting then

		-- Find the points on a semi-circle with radius 350, spaced 15 apart
		for i=pos.x - 350, pos.x + 350, 15 do

			y = (i-pos.x)^2
			y = 122500 - (y) -- 122500 is radius, 350, squared
			y = math.sqrt(y)
			y = pos.y + y	

			to = vmath.vector3(i, y, pos.z)

			-- Raycast from player pos to calc'ed point, Collide with specified groups
			result = physics.raycast(vmath.vector3(pos.x, pos.y -40, pos.z), to, { hash("enemy"), hash("bounds"), hash("map"), hash("hostile"), hash("power_up") }, false)
			if result then

				--If collision then draw a line to the object.
				draw_line(vmath.vector3(pos.x, pos.y -20, pos.z), result.position,  vmath.vector4(1,0,1,1))
				
				-- Loop for adding bias based on object
				if result.group == hash("hostile") then
					result.fraction = result.fraction / 5

				elseif result.group == hash("enemy") then
					result.fraction = result.fraction / 2
					
				elseif result.group == hash("power_up") then
					result.fraction = -result.fraction -- Negative causes attraction, not avoidance
				end
				
				-- If on left then add to total else subtract from total
				if result.position.x <= pos.x then

					-- Add bis if in front of player
					if result.position.x >= pos.x - 60 then
						result.fraction = result.fraction / 2
					end
					
					total = total + (1/result.fraction)
				else
					-- Add bis if in front of player
					if result.position.x <= pos.x + 60 then
						result.fraction = result.fraction / 2
					end
					
					total = total - (1/result.fraction)
				end
			end

			-- Show total on screen
			label.set_text("/labels#left", total)
		end

		-- Limit maximum speed modifier to +-15
		if total >= 15 then
			total = 15
		elseif total <= -15 then
			total = -15
		end

		-- Speed is modified by total cost/ Div by 9 reduces the "responsivenss" of the player.
		self.speed = (self.base_speed + strafe_speed) * (total/9)
	end


	--Update the player position and keep them within the bounds of the screen
	pos.x = pos.x +  self.speed * dt
	if pos.x >= width then
		pos.x = width
	elseif pos.x <= 0 then
		pos.x = 0
	end

	-- Set new postion
	go.set_position(pos)

	-- Reset values
	self.speed = 0
	total = 0

	--Update the score shown in the gui. Sent to game.gui_script
	msg.post("/gui#game", "increase_score", {value = math.ceil(base_score * multiplier)})
end

--Called on collision
function collision(self)
	--set cost values for raycasting
	total = 0
	self.speed = 0

	-- Pause music if playing
	if music then
		sound.pause("/obstacle_gen#sound", true)
		music = "play"
	end
	
	-- "Pauses" the game
	msg.post("controller:/controller_object#game_proxy", "set_time_step", {factor = 0, mode = 1})
	paused = true
	
	-- stop score from increasing and update game.gui_script
	base_score = 0
	msg.post("/gui#game", "set_multiplier", {multiplier = multiplier + base_score})
	
	-- Set player sprite back to ship from explosion
	sprite.play_flipbook("/player#sprite", "ship")
	
	-- move player to middle of screen
	pos = go.get_position()
	pos.x = width/2
	go.set_position(pos)

	-- Show "play" button. Sent to game.gui_script
	msg.post("/gui#game", "show_play")
end

function endInvincibility(self)
	--Collisions no longer ignored, end glowing effect, set alpha to default
	self.ignore_collisions = false
	go.cancel_animations("player#sprite", "tint.w")
	go.set("player#sprite", "tint.w", 1)
end

function on_message(self, message_id, message, sender)
	-- collision_response is sent after any collision, only acknowledge if not ignoring collisions and it is not a powerup
	-- or if it is not the obstacle that collided with the ram (each collision sends a message every frame)
	if message_id == hash("collision_response") and not self.ignore_collisions and message.other_group ~= hash("power_up") and message.other_id ~= hash(id_to_ignore) then
		

		-- BATTERING RAM
		
		-- If collision is with tip of ship and there is still ram durability then
		-- Also makes sure the the collision is with an obstacle not the map
		if sender == msg.url(nil, "player", "ship_tip_collision") and ram_durability > 0 and message.other_group ~= hash("map") then

			id_to_ignore = message.other_id

			-- Glowing effect
			go.animate("/player#sprite", "tint.w", go.PLAYBACK_ONCE_PINGPONG, 2, go.EASING_INSINE, 0.2)
			
			-- Reduce ram_durability
			ram_durability = ram_durability - 1
			
			-- Update gui
			msg.post("/gui#game", "set_ram", { durability = ram_durability })
			
		else

			-- NORMAL COLLISIONS
			
			--Ignore collisions and stop particle fx
			self.ignore_collisions = true
			particlefx.stop("/player#water")
			
			-- Play explosion animation then call collision()
			sprite.play_flipbook("/player#sprite", "explosion", collision)
		end
		
	elseif message_id == hash("unpause") then
		-- If music was previously playing then unpause
		if music == "play" then
			sound.pause("/obstacle_gen#sound", false)
		end
		-- Make player glow
		go.animate("/player#sprite", "tint.w", go.PLAYBACK_LOOP_PINGPONG, 2, go.EASING_INSINE, 1.5)
		
		-- Restart particle fx
		particlefx.play("/player#water")
		
		-- Unpause the game
		msg.post("controller:/controller_object#game_proxy", "set_time_step", {factor = 1, mode = 1})
		paused = false
		
		-- Resume score increase
		base_score = 1
		
		-- begin invincibility timer
		timer.delay(5, false, endInvincibility)
	end
end

function on_input(self, action_id, action)

	-- MOVEMENT
	
	--Move negative for left, positive for right
	if action_id == hash("left") then
		self.speed =self.speed + -(self.base_speed + strafe_speed)
	end

	if action_id == hash("right") then
		self.speed = self.speed + self.base_speed + strafe_speed
	end


	-- GAMEMODE TOGGLES
	
	-- Toggle raycasting
	if action_id == hash("raycast") and action.released then
		if raycasting then
			raycasting = false
			label.set_text("/labels#left", "")
			label.set_text("/labels#right", "")
		else
			raycasting = true
		end

		--If music mode button pressed
	elseif action_id == hash("sound") and action.released and not paused then
		
		-- If music playing then pause it, end glwoing effect and reset tint
		if music then
			sound.pause("/obstacle_gen#sound", true)
			music = false
			multiplier = multiplier / 2
			go.cancel_animations("player#sprite", "tint")
			go.set("player#sprite", "tint",vmath.vector4(1, 1, 1, 1))
			
			--If sound has already been played then unpause it, begin effect
		elseif sound_played then
			sound.pause("/obstacle_gen#sound", false)
			music = true
			multiplier = multiplier * 2
			go.animate("player#sprite", "tint", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 0, 1, 1.5), go.EASING_INSINE, 1, 1)
			
		else
			--If sound is being played for the first time then begin the sound and glowing effects
			sound.play("/obstacle_gen#sound")
			sound_played = true
			music = true
			multiplier = multiplier * 2
			go.animate("player#sprite", "tint", go.PLAYBACK_LOOP_PINGPONG, vmath.vector4(1, 0, 1, 1), go.EASING_INSINE, 1, 1)
		end
	end
end
