-- Loads the specified player attribute from the save file where index is a string and represents 
-- the name of the table index where the specific attribute is stored
function load(index)
	-- gets the path to an appropriate save path for the system. format is (folder_name, file_name)
	local save_path = sys.get_save_file("Boat_Racer", "save_file")
	-- Returns a table of values.
	loaded_table = sys.load(save_path)
	return loaded_table[index]
end

function init(self)
	-- loads the players strafe_speed from the save file
	strafe_speed = load("strafe_speed")
	msg.post(".", "acquire_input_focus")
	self.base_speed= 100
	self.speed = 0
	self.acceleration = 50
	-- Used to define movement bounds in update
	width, height = window.get_size()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	pos = go.get_position()
	--dt is time delta between frames
	pos.x = pos.x +  self.speed * dt
	if pos.x >= width then
		pos.x = width
	elseif pos.x <= 0 then
		pos.x = 0
	end
	
	go.set_position(pos)
	self.speed = 0
end

function collision(self)
	-- "Pauses" the game
	msg.post("controller:/controller_object#game_proxy", "set_time_step", {factor = 0, mode = 1})
	-- Set player sprite back to ship
	sprite.play_flipbook("/player#sprite", "ship")
	-- move player to middle of screen
	pos = go.get_position()
	pos.x = width/2
	go.set_position(pos)
	-- Show "play" button
	msg.post("/gui#game", "show")
end

function on_message(self, message_id, message, sender)
	-- collision_response is sent after any collision
	if message_id == hash("collision_response") then
		-- Play explosion animation then call collision()
		sprite.play_flipbook("/player#sprite", "explosion", collision)
		
	elseif message_id == hash("unpause") then
		-- Unpause the game
		msg.post("controller:/controller_object#game_proxy", "set_time_step", {factor = 1, mode = 1})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.speed = -(self.base_speed + strafe_speed)

	elseif action_id == hash("right") then
		self.speed = self.base_speed + strafe_speed
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
