require "modules.save_load"

function init(self)
	-- Initialise data if needed. From save_load module.
	init_player_data(true, false)
	init_score_data(false, nil, true)
	
	--When game is opened load the main menu screen
	local current_proxy = "/controller_object#main_menu_proxy"
	msg.post(".", "load_proxy", {name = "mainmenu"})
	msg.post(".", "acquire_input_focus")

	-- Set the seed for rng. Ensures different course every time.
	math.randomseed(socket.gettime())
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_proxy") then

		-- Each "load_proxy" message carries the name of the proxy to load.
		-- Proxies are defined in the controller collection
		-- Previously loaded collection geys unloaded to save on system resources
		if message.name == "upgrade" then
			msg.post(".", "unload_proxy")
			msg.post("/controller_object#upgrade_proxy", "load")
			
		elseif message.name == "mainmenu" then
			msg.post(".", "unload_proxy")
			msg.post("/controller_object#main_menu_proxy", "load")

		elseif message.name == "leaderboard" then
			msg.post(".", "unload_proxy")
			msg.post("/controller_object#leaderboard_proxy", "load")

		elseif message.name == "game" then
			msg.post(".", "unload_proxy")
			msg.post("/controller_object#game_proxy", "load")

		elseif message.name == "exit" then
			msg.post(".", "unload_proxy")
			sys.exit(0) --Successful exit
		end
		
	
		--Unloading the current proxy
	elseif message_id == hash("unload_proxy") and current_proxy then
		msg.post(current_proxy, "disable")
		msg.post(current_proxy, "final")
		msg.post(current_proxy, "unload")
		
		-- After posting a "load" msg the target proxy returns "proxy_loaded" to show it is ready to be enabled.
		-- Target proxy must then be initialised, enabled
	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		
		-- track the current proxy for unloading purposes
		current_proxy = sender
	end
end
